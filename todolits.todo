
Backend Optimization: @critical
    Refactor Cryptographic Operation:
        ☐ Move the file r/w function in @shared/utils/cryptography/encrypt.ts(decrypt.ts) into @shared/utils/file/ @30m
    Notarization Simplification:
        ☐ @apps/backend/src/onchain/willFactory/notarizeCid.ts actually requires only `WILL_FACTORY` and `EXECUTOR_PRIVATE_KEY` fileds from @.env (update @shared/utils/validation/environment.ts) @1h
    Cofing Simplification:
        ☐ Remove unnecessary config options. @30m
    Logging API: @low
        ☐ Add an API for logging with National ID.

Flatten the Will: @high
    ☐ Transform the backend will file from JSON format into flatten text so that the proof size can be reduced. @1d

ZKP circuits: @high
    Decryption ZKP:
        ✔ Prove that `signed_will == decrypt(ciphertext, key, iv, authTag)` without exposing `key`. @done(25-08-02 16:19)
    
    Format ZKP: @cancelled(25-08-02 16:17)
        ✘ Prove that `signed_will` is in the proper format without exposing its content. @cancelled(25-08-02 16:19)

    Signature ZKP:
        ☐ Prove that `verify(signature, testator, estates) == ture`, with the fields coming from `signed_will`.
    
    Inclusion ZKP:
        ☐ Prove that the given `testator` and `estates` are coming from `signed_will`.
    
    UploadCid ZKP:
        ☐ Decryption ZKP + Signature ZKP
    
    CreateWill ZKP:
        ☐ Decryption ZKP + Inclusion ZKP

Integrate Pinata: @low
    for reliable IPFS pinning

Testing: @low
    ☐ @apps/backend @2d
    ☐ @apps/frontend
    ✔ @contracts @done(25-08-02 16:20)
    ☐ @zkp

Frontend: @low
    Implement frontend.

Local Database: @low
    ☐ Setup MySQL.
    ☐ CRUD interface.
    ☐ Move `key.txt` and variables in `.env` to DB.


Deployment: @low
    Testnet:
        ☐ Abritrum Sepolia
        ☐ Sepolia

    Mainnet:
        ☐ Arbitrum
        ☐ Ethereum

Performance Analysis: @low

    Basic Version:

    Optimized ZKP: