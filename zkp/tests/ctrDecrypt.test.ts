import { Byte, Byte16, Word } from "./type/index.js";
import { WitnessTester, wordToByte } from "./util/index.js";
import { ctrDecrypt } from "./logic/index.js";

describe("CtrDecrypt Circuits", function () {
  let circuit: WitnessTester<["ciphertext", "key", "iv"], ["plaintext"]>;

  describe("AES-256-CTR Decrypt Circuit", function () {
    describe("64 Bytes (4 Block)", function () {
      beforeAll(async function (): Promise<void> {
        circuit = await WitnessTester.construct(
          "circuits/shared/components/aes-gcm/ctrEncrypt.circom",
          "CtrDecrypt",
          {
            templateParams: ["256", "64"],
          },
        );
        circuit.setConstraint("AES-256-CTR 4-block decryption");
      });

      it("should work with GCM standard test vectors", async function (): Promise<void> {
        // NIST SP 800-38A F.5.5 CTR-AES256.Encrypt Block #1-#4
        const plaintext = [
          0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e,
          0x11, 0x73, 0x93, 0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03,
          0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51, 0x30,
          0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19,
          0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b,
          0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
        ] as Byte[];
        const key = [
          { bytes: [0x60, 0x3d, 0xeb, 0x10] },
          { bytes: [0x15, 0xca, 0x71, 0xbe] },
          { bytes: [0x2b, 0x73, 0xae, 0xf0] },
          { bytes: [0x85, 0x7d, 0x77, 0x81] },
          { bytes: [0x1f, 0x35, 0x2c, 0x07] },
          { bytes: [0x3b, 0x61, 0x08, 0xd7] },
          { bytes: [0x2d, 0x98, 0x10, 0xa3] },
          { bytes: [0x09, 0x14, 0xdf, 0xf4] },
        ] as Word[];
        const iv = [
          0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,
          0xfb, 0xfc, 0xfd, 0xfe, 0xff,
        ] as Byte16;
        const ciphertext = [
          0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5,
          0x04, 0xbb, 0xf3, 0xd2, 0x28, 0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62,
          0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5, 0x2b,
          0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70, 0x17, 0xba,
          0x2d, 0x84, 0x98, 0x8d, 0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad,
          0xa6, 0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6,
        ];

        expect(ctrDecrypt(plaintext, key, iv)).toStrictEqual(ciphertext);
        await circuit.expectPass(
          { ciphertext, key: wordToByte(key), iv },
          { plaintext },
        );
      });
    });
  });
});
