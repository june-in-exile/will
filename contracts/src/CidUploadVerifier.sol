// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.24;

import { IVerifierConstants } from "./interfaces/IVerifierConstants.sol";
import { EllipticCurveOps } from "./libs/EllipticCurveOps.sol";

contract CidUploadVerifier is EllipticCurveOps, IVerifierConstants {
    // Verification Key data
    uint256 constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
    uint256 constant alphax = 16428432848801857252194528405604668803277877773566238944394625302971855135431;
    uint256 constant alphay = 16846502678714586896801519656441059708016666274385668027902869494772365009666;
    uint256 constant betax1 = 3182164110458002340215786955198810119980427837186618912744689678939861918171;
    uint256 constant betax2 = 16348171800823588416173124589066524623406261996681292662100840445103873053252;
    uint256 constant betay1 = 4920802715848186258981584729175884379674325733638798907835771393452862684714;
    uint256 constant betay2 = 19687132236965066906216944365591810874384658708175106803089633851114028275753;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 17029534743664877519013914421538147855895819836533046648235146903369942092196;
    uint256 constant deltax2 = 17428824789773664905066098444860112109864892608980321900680209803652986054863;
    uint256 constant deltay1 = 2589224681109827326783862815981558313612227517602590708177931081057145281847;
    uint256 constant deltay2 = 970222010384331156377069727309986491477436836176661434738703183918238497359;
    // IC0 constant
    uint256 constant IC0x = 20613560856891735858107080143430420066809959697846792408542702417451071140763;
    uint256 constant IC0y = 3411292424802799579610787758592677601657755615342110716634816357644950269861;

    IVerifierConstants public immutable constants1;
    IVerifierConstants public immutable constants2;

    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;
    uint16 constant pLastMem = 896;

    constructor(address _constants1, address _constants2) {
        constants1 = IVerifierConstants(_constants1);
        constants2 = IVerifierConstants(_constants2);
    }

    function _getICCount() internal pure returns (uint256) {
        return 286;
    }

    function getICCount() external pure returns (uint256) {
        return _getICCount();
    }

    function _getIC(uint256 index) internal view returns (uint256 x, uint256 y) {
        if (index == 0) {
            return (IC0x, IC0y);
        } else if (index <= 150) {
            return constants1.getIC(index);
        } else if (index < _getICCount()) {
            return constants2.getIC(index);
        } else {
            revert("IC index out of range");
        }
    }

    function getIC(uint256 index) external view returns (uint256 x, uint256 y) {
        return _getIC(index);
    }

    function _getBatchIC(uint256 startIdx, uint256 count)
        internal
        view
        returns (uint256[] memory xs, uint256[] memory ys)
    {
        if (startIdx == 0 || startIdx >= _getICCount()) revert BatchStartOutOfRange(startIdx);
        if (startIdx + count > _getICCount()) revert BatchEndOutOfRange(startIdx, count);

        xs = new uint256[](count);
        ys = new uint256[](count);

        uint256 processed = 0;

        // Process constants1 range (1-150)
        if (startIdx <= 150 && processed < count) {
            uint256 batchStart = startIdx;
            uint256 batchEnd = startIdx + count > 151 ? 151 : startIdx + count;
            uint256 batchCount = batchEnd - batchStart;

            (uint256[] memory batchXs, uint256[] memory batchYs) = constants1.getBatchIC(batchStart, batchCount);

            for (uint256 i = 0; i < batchCount; i++) {
                xs[processed + i] = batchXs[i];
                ys[processed + i] = batchYs[i];
            }
            processed += batchCount;
        }

        // Process constants2 range (151+)
        if (processed < count) {
            uint256 batchStart = startIdx + processed;
            uint256 remaining = count - processed;

            (uint256[] memory batchXs, uint256[] memory batchYs) = constants2.getBatchIC(batchStart, remaining);

            for (uint256 i = 0; i < remaining; i++) {
                xs[processed + i] = batchXs[i];
                ys[processed + i] = batchYs[i];
            }
        }
    }

    function getBatchIC(uint256 startIdx, uint256 count)
        external
        view
        returns (uint256[] memory xs, uint256[] memory ys)
    {
        return _getBatchIC(startIdx, count);
    }

    function computeLinearCombination(uint256[285] calldata pubSignals) internal view returns (uint256 x, uint256 y) {
        // Get IC0 as starting point
        (x, y) = _getIC(0);
        if (!isOnCurve(x, y)) revert ICNotOnCurve(x, y);

        // Adjust batch size based on gas limits
        uint256 batchSize = 50;
        uint256 ICCount = _getICCount();

        for (uint256 start = 1; start < ICCount; start += batchSize) {
            uint256 end = start + batchSize > ICCount ? ICCount : start + batchSize;
            uint256 count = end - start;

            // Get batch of IC constants
            (uint256[] memory icxs, uint256[] memory icys) = _getBatchIC(start, count);

            // Process each IC in the batch
            for (uint256 i = 0; i < count; i++) {
                uint256 signalIndex = start + i - 1; // -1 because pubSignals is 0-indexed but IC starts from 1
                if (signalIndex < 285 && pubSignals[signalIndex] != 0) {
                    // Scalar multiplication
                    (uint256 mulX, uint256 mulY) = ecMul(icxs[i], icys[i], pubSignals[signalIndex]);

                    // Point addition
                    (x, y) = ecAdd(x, y, mulX, mulY);
                }
            }
        }
    }

    function verifyProof(
        uint256[2] calldata _pA,
        uint256[2][2] calldata _pB,
        uint256[2] calldata _pC,
        uint256[285] calldata _pubSignals
    ) public view returns (bool) {
        (uint256 vk_x, uint256 vk_y) = computeLinearCombination(_pubSignals);
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem, vkX, vkY) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), vkX)
                mstore(add(_pPairing, 416), vkY)

                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)

                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations âˆˆ F
            for { let i := 0 } lt(i, 285) { i := add(i, 1) } { checkField(calldataload(add(_pubSignals, mul(i, 32)))) }

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem, vk_x, vk_y)

            mstore(0, isValid)
            return(0, 0x20)
        }
    }
}

contract VerifierConstants1 is IVerifierConstants {
    uint256 constant IC1x = 12084938658666178284432732236038629529798970147443427015843651602025595707299;
    uint256 constant IC1y = 6119879400979413227630648454670568447792288571829591763036376181394544391511;
    uint256 constant IC2x = 17119763248966374136170342879695434813906300112556755634209890075413831245720;
    uint256 constant IC2y = 8963487599289627450969907512234096529785379796155351755614053300282483436816;
    uint256 constant IC3x = 16278609697680969961602729427422337481059742113263689531889070137874410329814;
    uint256 constant IC3y = 3070710828819813045030789490032946419643633027910990985569150906290459834468;
    uint256 constant IC4x = 781632668180014489064644242559611103328181913514022879466170888206718793795;
    uint256 constant IC4y = 5280607659525446913029880858942472946284377387314657667905509438991473186525;
    uint256 constant IC5x = 7616700052296207300270864828922235289010441156084183365658440059134364853677;
    uint256 constant IC5y = 9097250580941022748940369021707670953280965024226679585464043768763693135919;
    uint256 constant IC6x = 7898910119017876403096884481571116345160726749281821365833477690927833466173;
    uint256 constant IC6y = 21517066896304903026378720981944029633313817468033056437642136402088596571492;
    uint256 constant IC7x = 13777608380643142503714807581072108481184870967906144026038770005863228735918;
    uint256 constant IC7y = 8701415781180842195282719637953353173769589009551239430578965119601411056467;
    uint256 constant IC8x = 10646996900973696353244052851139287661877865003616218780717485642822503876099;
    uint256 constant IC8y = 15032027998510875736917065651324730363277814257055834924006965412738668487401;
    uint256 constant IC9x = 17807184542508928338272709467335773251479092451241899614872274744683277017633;
    uint256 constant IC9y = 13050789231915863835543467510881764240408270058578516000342411801211706541359;
    uint256 constant IC10x = 13809992696421706819631782279074112533358207720101305658420944192206314665034;
    uint256 constant IC10y = 3442679056114512590228938135194564176887973410552357790213267277053087307626;
    uint256 constant IC11x = 19879820125283106255020155878921429269197837415021937708026045507228884288824;
    uint256 constant IC11y = 7722044806819859000628787391663611067835575452508145827237379335022620557807;
    uint256 constant IC12x = 64714517271249568095994846265529906498028111330568193700069408871870249475;
    uint256 constant IC12y = 1465056259304920763856346649967852069323419427078210744225771772563593040798;
    uint256 constant IC13x = 12395972731057201328047620336720821400502308771726327889376887990365352727513;
    uint256 constant IC13y = 12286602362510667370983631436837035717978868841772758400087798462630103348614;
    uint256 constant IC14x = 7770103501131453332759836101264104165930821431441529952685759227683399097162;
    uint256 constant IC14y = 2968456891856704971740712874038099194220366176554679491272881853970085290086;
    uint256 constant IC15x = 1289425228600654841220706662212324003898537076478532667826720527872180895104;
    uint256 constant IC15y = 21788354846158219338520754483561376129651572739151484337117484798471864157010;
    uint256 constant IC16x = 616351088525793780167000253167314635993208463392398549248130574565247748569;
    uint256 constant IC16y = 19555051265429055308767521986673881597932160990480946787353093662686750397813;
    uint256 constant IC17x = 9767939890559242704744539005999511238151932077832565255893636313612575739187;
    uint256 constant IC17y = 19671614443625446819425942083287543142451633809500931962119637255096106394132;
    uint256 constant IC18x = 14427855464424503455621085793477717164548444294277006641196319430999809242334;
    uint256 constant IC18y = 9129649126627848301600544877847356848172656969089383311235959252081691168016;
    uint256 constant IC19x = 12384810987267564366966960971362383185705749567622384427460226880546964837840;
    uint256 constant IC19y = 5471550197440147328943387279562583363875545278846542128653431519937616661118;
    uint256 constant IC20x = 11130934941011210661299914534890293220544666684383491026642907902820506999398;
    uint256 constant IC20y = 5416287104324390770581103195273085455507683709973684983579689330445455168040;
    uint256 constant IC21x = 18604862178059391236990441300516335603598658510310066015164488370939185218367;
    uint256 constant IC21y = 12640873096356118248545039920812877950932428576485636451350622213336667062180;
    uint256 constant IC22x = 19826814278429740713355326675571770145242830689802350068777592942399145362439;
    uint256 constant IC22y = 8463064857338071049371815780159033996617480700135463592789396497997357939987;
    uint256 constant IC23x = 12866629537775865409718094661880105475513130702183733763779611216829984921612;
    uint256 constant IC23y = 19917110459400068967794231984117834408954778898799897797129954865891906196035;
    uint256 constant IC24x = 8863534255990780980826288131347102024491371160825325873239751327967412779446;
    uint256 constant IC24y = 15029402220944807522343331085619954807153667821337816355638534232083430804424;
    uint256 constant IC25x = 2785479652349427377425573700396364326307019386771654030665859196810436358175;
    uint256 constant IC25y = 2165994739378609729914856608451179349645640495380713002595887514244496639068;
    uint256 constant IC26x = 4098294545398521444364766775104757567056612637553289379401000009387152847898;
    uint256 constant IC26y = 9381247624238358214972044171696453135493784328758209349202704346730593755048;
    uint256 constant IC27x = 19927324954480980657686823011303880638632204392850642897415660767585345014251;
    uint256 constant IC27y = 2619988938357469620700630498304681788728127126643317173408455994685368785585;
    uint256 constant IC28x = 19315374132808176827615352490189521545360781041092885767497854538880107178056;
    uint256 constant IC28y = 17198123538824118905610444574147817294962124339454276402978751030635963941013;
    uint256 constant IC29x = 12689050689741388644663135381791621822475634795513257449375861713086568536793;
    uint256 constant IC29y = 169923011364319991466198734041760903122382749997204503413767663159512688327;
    uint256 constant IC30x = 4480774975457959729389027570490658411418642224249255309229289571426260577249;
    uint256 constant IC30y = 15550790305960294678265797324205280330855356689693169662559359678236427585961;
    uint256 constant IC31x = 909115941401753508114728785416707746295661253015131881225539176334356768758;
    uint256 constant IC31y = 11042844264945901158414683181959567800268370438065879634298568565624524204759;
    uint256 constant IC32x = 17428264430677664494842863406075588329503152839573973060676668661042966303343;
    uint256 constant IC32y = 12611856284781146592400653559788070757418558188248119313504462175516162216733;
    uint256 constant IC33x = 15622386205133839045455803602491589021645150477634466178240275637597657127586;
    uint256 constant IC33y = 17292542000341699254684818087449581991417890011076665246615498869924719713372;
    uint256 constant IC34x = 3193709712729703025332494691762459660566359825461637518712396660737614498577;
    uint256 constant IC34y = 7502402762987702372487582996781239857316644674244476233652877464572320316936;
    uint256 constant IC35x = 15291123919190857695175559663006080949957855823413699999043992317906320244794;
    uint256 constant IC35y = 11768816957648506979686126727093807009058233936072602759544579026092367390726;
    uint256 constant IC36x = 2802983270146715054567293662708451901258702553939909295574446088873232318578;
    uint256 constant IC36y = 13580858701324608598539909972736679822872878417173146653584213200571848100316;
    uint256 constant IC37x = 20403012212261541445380438634098305786668401923016720539233551118283553492063;
    uint256 constant IC37y = 7380140247965935693964460055375274663885984256546894835271926246437981339756;
    uint256 constant IC38x = 7098156392820141708700715591247496755162025548843165635710441702183835832766;
    uint256 constant IC38y = 5923949080061212441318097698481276846886192276789558129367356135512468536924;
    uint256 constant IC39x = 18709011052759906116958021496929940781101646311025291004490401702969714892381;
    uint256 constant IC39y = 1245546263487714406841242223636609828101764334406956421998869070357407873643;
    uint256 constant IC40x = 14517452768767262919818457970600146473733493068876585375251323284272805080770;
    uint256 constant IC40y = 13691118567732091450950907670434172059135344730480128930995060660121371445581;
    uint256 constant IC41x = 17613652993271270165385467850159033061028483862107633387733302116375781579293;
    uint256 constant IC41y = 9447219751340673360755996459956836824662122146582338953948097259369905726906;
    uint256 constant IC42x = 7043730448345252700158168378834184604687159130591721429984724879663975691918;
    uint256 constant IC42y = 8418859049867205991184918982770607901634386659736890004216842249028051507652;
    uint256 constant IC43x = 4543862244801845935551602612996345234468273183903675551690765434731096731452;
    uint256 constant IC43y = 11616516077336037526320038488262872013707730614216572187813315985914305829102;
    uint256 constant IC44x = 19971479447837187525099368138242707494319501440893863457977735644472467514084;
    uint256 constant IC44y = 4861025591969532351554638228295973094513245159735959083873712113819110342432;
    uint256 constant IC45x = 7228572014199042614770209749737079303560973510854307417754294002948455278486;
    uint256 constant IC45y = 1479351061656091417193737052511560343466811625748562434411291052536736873214;
    uint256 constant IC46x = 9195689142398381504100620790898339806196620509776531853685118946257879398175;
    uint256 constant IC46y = 12258452702049223136329182408217024257549077694129498338741626583386808134862;
    uint256 constant IC47x = 4341883274579052588338958344721879500811350343220029308561286882718460765563;
    uint256 constant IC47y = 20870556424355785902178643168264609578255662481143619315236137496235057068551;
    uint256 constant IC48x = 2954756928970776762226655961486588731628743950239398820753887096197520140792;
    uint256 constant IC48y = 15566161093343675861654076989615455031238325637426866158826657516088334661972;
    uint256 constant IC49x = 13619425375712175802558192300458508957433200149630633585798196902866245618142;
    uint256 constant IC49y = 15597590258201114848495130514059365152277659779365326064232834835057345201954;
    uint256 constant IC50x = 18660959440399408844624816883686463870872951402328762371687485562328094174495;
    uint256 constant IC50y = 17317749117812068151553381616280154524237945153930878183839214911584047022147;
    uint256 constant IC51x = 6831989707452909159665262765868898340013512087394227279125361089338814848442;
    uint256 constant IC51y = 11216879283402997449068740933261110278753142806759033096948791574903742037749;
    uint256 constant IC52x = 604121094364643818874158325619657367004121641381292052830928722887542530712;
    uint256 constant IC52y = 4808154716104811819182000844859067208277136876845737768479870983044051198863;
    uint256 constant IC53x = 13303955602153883859849804626554175784872065610333435783169446749544686850297;
    uint256 constant IC53y = 5874113052939581492511848191553144734781464835281584450329650501390061384725;
    uint256 constant IC54x = 9857048945602719755110933988891686722416401264415455920390393790118628388683;
    uint256 constant IC54y = 16939664305104645972638384529832334034442013927151036176401006821782794680514;
    uint256 constant IC55x = 2098832798112623178226165833532471639091173918337453104228988765886456450752;
    uint256 constant IC55y = 3435993478571830837743100845552698110825044999313847332499453174218856616379;
    uint256 constant IC56x = 11559894135070306507158565272756278679873038672656455043395422935168500799937;
    uint256 constant IC56y = 6267035880529862371551710853848360265250189507862598048316565990315032895513;
    uint256 constant IC57x = 3215701833933013073645287430859382147464291027541658327947613814084268019151;
    uint256 constant IC57y = 19274570955385823804893025911840075723094586146825652429574383188500865992228;
    uint256 constant IC58x = 15917159753836173119405726791594574530895261960709467357741388287624476330582;
    uint256 constant IC58y = 13070224606023161748490237568081157266588858086548092675784285994011550475286;
    uint256 constant IC59x = 15120064126130867430054161925438021395411652582713477007320302759383388365603;
    uint256 constant IC59y = 18235976047624845275091368833490883826482936082654729436065227002987594939382;
    uint256 constant IC60x = 4378932620441692127178959842207283889128388345141848203271744967021065764330;
    uint256 constant IC60y = 1796263793644266114169209882078020135767947442557043287961980922372594009930;
    uint256 constant IC61x = 8989248823756067432625396702553572662866194504926225814469867843619943663224;
    uint256 constant IC61y = 34369857365283002397661284005031786741913255492905441512578234722790558198;
    uint256 constant IC62x = 12814540049930326805808137113510957604289126038957414301862929469872657660877;
    uint256 constant IC62y = 3224082721148057649545086399427201486813538627833929601882283751079574062926;
    uint256 constant IC63x = 16088025852095137070082306115045341083022325043373580549646228106256358666396;
    uint256 constant IC63y = 14483423173742289966253092826914185502564291713534435226234454416877245832412;
    uint256 constant IC64x = 5492591041631616494540799854857358663393757173359118180984771435100227626973;
    uint256 constant IC64y = 16026966508083413025414808454064628041223798601702988715529702635582024677383;
    uint256 constant IC65x = 5548032608608423437138500883616829806867590350354700329128637888423526656881;
    uint256 constant IC65y = 13540878890287386403263635267154457654405677207702405720632318711679743006500;
    uint256 constant IC66x = 18836456713290394436682805826213657051841223566301273521932391208790898181819;
    uint256 constant IC66y = 876091101613041101690631493448137692497547051967850530174964168345640962908;
    uint256 constant IC67x = 6787567338548044613194648839446139175442879048803942369181637880956638490016;
    uint256 constant IC67y = 17973513779648042383861085212018525677331569269530982878942300217788631505028;
    uint256 constant IC68x = 12915702821466553188738657230990254116671893078198793698329102338979817329255;
    uint256 constant IC68y = 13017059342324996560635227684290211422023793829335756970386884313400843927427;
    uint256 constant IC69x = 7309619466561935216598268248312510997391868758038994361740392712932683244080;
    uint256 constant IC69y = 2073735991416944233380141349611445803186038914694812051241083475296861141640;
    uint256 constant IC70x = 19344844164822546055677517791458031877964998722934035370620376734937227193873;
    uint256 constant IC70y = 15405207727784559112333429813960376821652179260419062941068277774243721923999;
    uint256 constant IC71x = 7597357807072884674069447330765390748376738271810359218631673927169818824752;
    uint256 constant IC71y = 10567827348076749540915368638183156974570682523838011436576364860642365321452;
    uint256 constant IC72x = 15168003007803419002267882815637723211467641472633541109261365776906621832423;
    uint256 constant IC72y = 7098957509596152930450739907590618559735915935265715470208255859863979133981;
    uint256 constant IC73x = 5883169991001131548967567537300299454964789053860551178438933264972251565550;
    uint256 constant IC73y = 2759792967648190582946393110314627866665399271144882675718027996188146888138;
    uint256 constant IC74x = 3992776581666386590061249756178496114959677895488316042560950904749641515615;
    uint256 constant IC74y = 18100720661032819841144143615596633863701583500793665029887194433811680608826;
    uint256 constant IC75x = 13470014417995015403598185439463113977185662696131853274970891483871490579007;
    uint256 constant IC75y = 5544558149987503470603890387557233895032062958930995886852339110308548873344;
    uint256 constant IC76x = 3487275475524492611485692188393153002585748812391437912689973452432607968229;
    uint256 constant IC76y = 2804410343891554710551263879199649593959070270965175333030210913436407921651;
    uint256 constant IC77x = 8992098663590340619038647894738549188593544555009977268779698589073062278530;
    uint256 constant IC77y = 11471570876267148468821836429131302346621270404423589545117676973317700159910;
    uint256 constant IC78x = 7561751400351851186046557978240201329089556305721280604132475858745648267336;
    uint256 constant IC78y = 10711646194398524066881099953231024706104127177842679365737043238942172874827;
    uint256 constant IC79x = 908274358712200536409271531942743809507324362486171527249083950362919905634;
    uint256 constant IC79y = 9211832479898076231406834677713653720346997755094163648970952116806946409108;
    uint256 constant IC80x = 18503297754275044865769344373794080895768098780165932820500735418077883959320;
    uint256 constant IC80y = 11576372018278140254004270845373757781856081512710765639727308516739538379749;
    uint256 constant IC81x = 13188180512198921365253402812545271847173643265261821940528828593414997277125;
    uint256 constant IC81y = 7097958721852448419678600898391840380188804334116112549014358717414197066070;
    uint256 constant IC82x = 1259802198841278797873323814051950686805930241820379788663406241882454166850;
    uint256 constant IC82y = 815063483411787137228103231140073084332460085894346894921928992623993367269;
    uint256 constant IC83x = 5294938225238012880600701062389824400971297940202207326795080334842091496597;
    uint256 constant IC83y = 10046418405503043343493290740069692916472996838110082874288536798385280812346;
    uint256 constant IC84x = 13109513330514827528719569025510637556509910777090675511251640576457705014502;
    uint256 constant IC84y = 17696819395919915238641716579325088570079240180465830718165753021396446993039;
    uint256 constant IC85x = 21438982961415398168164455268192428522338192603574388524426139575360343266084;
    uint256 constant IC85y = 867227188807097511022901014097337713671868996791138279646494686705447452703;
    uint256 constant IC86x = 540603845037040382365496690344288398093912450550828102604963074204235041117;
    uint256 constant IC86y = 19024702887797900597641431665025196436063887535974062830158838961760371873468;
    uint256 constant IC87x = 12581801211525663710403411436254574420664641442843467492568833014434843569059;
    uint256 constant IC87y = 9820787999526714690402615436895032588677206192415520542541138775720708476410;
    uint256 constant IC88x = 4220014210838224121350173268329117769211656334328025737983401449212565505532;
    uint256 constant IC88y = 5581412643582383588393727429877177232172802694319663136203543180042487375344;
    uint256 constant IC89x = 10907141264526525902207067052161842141634666178767227853639546897590346680138;
    uint256 constant IC89y = 9212527382632393508692136521410922345075106368119058041087313272998685039970;
    uint256 constant IC90x = 21324341966660028572646255682589064342328443992546193657091005587616574156799;
    uint256 constant IC90y = 9863905392040383079745214899373259999099772412169083181883096278318199074269;
    uint256 constant IC91x = 9892106469835122633118301725529939298920797059405125634038465376800520048512;
    uint256 constant IC91y = 5864423023112294879230421816488349336830488204189600092243491353985918722604;
    uint256 constant IC92x = 17424309055817805804194840673301237972509399587129547288139440388225277982385;
    uint256 constant IC92y = 1329089761870382079676235609078744176291997871822936144198574974954238524158;
    uint256 constant IC93x = 8919208901859185003141869891024621659965048604269051251764370328647039444768;
    uint256 constant IC93y = 11468831270052235498963006564145957245131338365766042854107065431602233859238;
    uint256 constant IC94x = 10028388483468046081330667426696704905424056023992449631185697254918117360405;
    uint256 constant IC94y = 10657128695304884724805103617194884732289887310057260400350605146765247377606;
    uint256 constant IC95x = 16690949603391728890213131819070676299026485565712076350318250949986482717604;
    uint256 constant IC95y = 4648538032284381863492846503769944024221754207156855470087437891833899562745;
    uint256 constant IC96x = 13135838347400607904435553120357875343742487218363822606538662607047420289051;
    uint256 constant IC96y = 14842806949405860550256713633423754824723896278625350134702784380404869944345;
    uint256 constant IC97x = 3025590405068002069494105613672443989790912820259912446238766074003143043661;
    uint256 constant IC97y = 12180872052923612184440174169839733415461732615565212813240745151493144041917;
    uint256 constant IC98x = 16009206295743467951988526343459994599064886458167813150614066724419806913046;
    uint256 constant IC98y = 10374748180193728132841969956357087227892794306251673244569685715968078388555;
    uint256 constant IC99x = 15079969693771213288829305627722776574847077907421992833826602890337006279588;
    uint256 constant IC99y = 19915704401842745666901355217659602670140812620077983487144647585685934837318;
    uint256 constant IC100x = 18262676710099557882874911789039887034186094598477257928929819532263098798680;
    uint256 constant IC100y = 14863125492079472880849004357330283742353222324055591592569764712868166224782;
    uint256 constant IC101x = 12540473045321577649783284341275878013951695652219881338294122208583652760616;
    uint256 constant IC101y = 12335154116666933294532036098636620630836312179866672892396735164469168955646;
    uint256 constant IC102x = 9522545984035015073289120218234394689322604602570112200769568796088736757995;
    uint256 constant IC102y = 18814669792678773470149384833472253784333138443549038920078142473392005480518;
    uint256 constant IC103x = 12913791329429138515018656664718881982479656851405975621760603770326395255389;
    uint256 constant IC103y = 4103504104977077717780253382754223699873678212220452122009803625482798410880;
    uint256 constant IC104x = 3869863498455573633388544354722353758132426583371388375847212759188398013044;
    uint256 constant IC104y = 19637275436051313460456266886949831369260483879770518746220915663041875791980;
    uint256 constant IC105x = 13552059609928658274877949602828158496402492976127793156165890253866776922552;
    uint256 constant IC105y = 5587914978168448778733023582493106453698479297371667923593172369799564798551;
    uint256 constant IC106x = 1256729833148432166716361794235275214801221204200337522091268548191598546645;
    uint256 constant IC106y = 1262624428883552512011391926870988807487283355355150077731883994052124041064;
    uint256 constant IC107x = 13389656980902362019424732676256504360589741047073674844790422675712170581015;
    uint256 constant IC107y = 12336473530298767388336186075532308342980944180058566343664744513034438280078;
    uint256 constant IC108x = 10821230821115319756041350759994536490090455401134525747978338087746438461333;
    uint256 constant IC108y = 19494109548952392245082479825126335916248206122294973310631981144923401660081;
    uint256 constant IC109x = 6741961767535619572816198298312274746842223048830237045696427788661825930353;
    uint256 constant IC109y = 8058755909265631731034228326851619424653266550105008998401669317574339385847;
    uint256 constant IC110x = 13665843330855872575549859063556691288193361986858069132095906132779910511151;
    uint256 constant IC110y = 2632949874781348347688794679421861649934783269394096486123418652649514868524;
    uint256 constant IC111x = 2479562189199613983028769869762194877572408863639673871422700094498474080672;
    uint256 constant IC111y = 11405644144652421941145687109496840429034984214230801716914850640107941072298;
    uint256 constant IC112x = 10116975715524513870773000804773288974220045734873297415945141355942551651259;
    uint256 constant IC112y = 21462199064321756491986011538052985198883085274719952182546187665379790067828;
    uint256 constant IC113x = 2502642272982321715611202546210165531705486965136232604452707316839837069624;
    uint256 constant IC113y = 13929897811817473325000414540952171504972572624284622771470215088344007191593;
    uint256 constant IC114x = 13508363935846352755988621632918569054592248604609030675006710084432726470560;
    uint256 constant IC114y = 5655742066222897138422993897113004300716611171196278401210978988928634888452;
    uint256 constant IC115x = 7115705863605545287414110995412138617657377999509483149664949683183249031315;
    uint256 constant IC115y = 7429503136090221868509440481722688777072900111872829338808428198170483218333;
    uint256 constant IC116x = 11962787266297564333224319775122987758036358438179962675493269091219256565067;
    uint256 constant IC116y = 6468708001526717372849098658290222393400109163776760096483977179402431411849;
    uint256 constant IC117x = 8930071895387889692758331652868870800595759055752512878486363483047060465277;
    uint256 constant IC117y = 19314207070876319421196614041838338597497903480656020809581084483706897400454;
    uint256 constant IC118x = 4494648846968210358848844512310232108792096460013631470523329934473968018212;
    uint256 constant IC118y = 1557770055883186800524576494573696232484992666219171113597954091025977991581;
    uint256 constant IC119x = 15163756583275964580563309570851700407282293656029033388728816530542988377075;
    uint256 constant IC119y = 8023250797897039985636669347500690342753560899563673620049983421088092455279;
    uint256 constant IC120x = 426507570456130056776219941191559596570677690436141597581543781749793368535;
    uint256 constant IC120y = 14252880981301295886111845145397886473135490851733875098982647502843027974981;
    uint256 constant IC121x = 6390038254638687184001986832931803936109391203776432011760743877602908017541;
    uint256 constant IC121y = 8674476231394096286419725218129148480212873580155108563346371555074952053522;
    uint256 constant IC122x = 9029318269145724483765233748433090001011945639189532627242480231753394611548;
    uint256 constant IC122y = 8841358855453235981711737790030721603470902751671157032671788761171183714056;
    uint256 constant IC123x = 19154000716100790349092130527202965188496937632548163929240287459084798499607;
    uint256 constant IC123y = 19712142033381567782762570678628758334795264740579246744010492945963978767978;
    uint256 constant IC124x = 164700948251225292236506952874106070363946326518393952795014007183390147200;
    uint256 constant IC124y = 16877136256048018726513925000301981894764543548267134629835441431736629561815;
    uint256 constant IC125x = 4994687911883313330808268053473124857043743472221744718486153410943233091263;
    uint256 constant IC125y = 17374817062010291743572625483526177608177340441515013064803686996351222286055;
    uint256 constant IC126x = 18130896513892031643756576835052839543395240520171092131583227978138640803989;
    uint256 constant IC126y = 4551218768321631145870527373874163087564035915037755862756297414940664709930;
    uint256 constant IC127x = 7389064018604748441026226241454884861767434467508751830325962762060546650955;
    uint256 constant IC127y = 19752076682907968664881576447032339630430522235454350940370092328476071919208;
    uint256 constant IC128x = 12093146316001570862859440006320402603926218179532908455071639598289474584020;
    uint256 constant IC128y = 11299655014226252429260038770848607656482147767563810625891734897109131606523;
    uint256 constant IC129x = 14210831084253978133825072045529491699534586328258857815002140532103221042972;
    uint256 constant IC129y = 13625714481500125182310417154237845225205354345707665949295876086471251804180;
    uint256 constant IC130x = 20638664586298812517512401520558670869311787129467299938369695811593688652846;
    uint256 constant IC130y = 13636190024331030090006237675306179700584487870079320185077943204287537365244;
    uint256 constant IC131x = 13740778275232534167631887330934161126140879774144656948410310832402451887915;
    uint256 constant IC131y = 18860114291913897613314345303193755545503194122059384463587976484362444561163;
    uint256 constant IC132x = 5363714881345991215352275464191957978097139361397002797390643731641792998219;
    uint256 constant IC132y = 7694597985797960393281407539963537053946660825394392556678147701865586195763;
    uint256 constant IC133x = 15068313440456039936954764601569028268772007725996478232783721488173271424703;
    uint256 constant IC133y = 12506298862901210807139478104691761885214507319786456765239873707554429916373;
    uint256 constant IC134x = 2840954260860172401343819213962709644267527960763969355656150150114945464702;
    uint256 constant IC134y = 19839799545054314188223042759399359701709888369989309061926534318817092229661;
    uint256 constant IC135x = 13213173151536740870362187108948381853527514033479217537895665756999767941517;
    uint256 constant IC135y = 2699315820753317877680509059059431174215780319527464329917667302747637255833;
    uint256 constant IC136x = 16878598557171800835558934550178597100095826126837449457835770662210681133244;
    uint256 constant IC136y = 17332879721820854449328017320786633242587012329389483085178213147315443222704;
    uint256 constant IC137x = 16369468753665893723994752501787711481477361603918736861766952881187367686164;
    uint256 constant IC137y = 12194197994688043530492218448275337421256083734155841775451303087470439936533;
    uint256 constant IC138x = 10094490796126175321779729894193972902900752578237087334780236641940722787110;
    uint256 constant IC138y = 10298489975283386248510808275859882808012890306908895983351727765016214092412;
    uint256 constant IC139x = 10129286270435386101485032972599202731337830261417760253228479450530186806385;
    uint256 constant IC139y = 16383688504677720019578181873400115198556674899363364023608442931302218430392;
    uint256 constant IC140x = 6291486499514412763806252849253188708923388859538210369552115848351669301243;
    uint256 constant IC140y = 4297762468175777628882343145977789504383675447389267331832175218229420373065;
    uint256 constant IC141x = 14958544230637919116079798555643114890750912661821462726081393687119459972392;
    uint256 constant IC141y = 7940107261921759401334284767615609791141857882808661834258315039281407292082;
    uint256 constant IC142x = 17130940877824792460269345777694577740588589468988649276729325581053132603941;
    uint256 constant IC142y = 10987702908823938290823219357367135994131980953349962207365929877763697554312;
    uint256 constant IC143x = 19554869148923500191554616100675564434759733076024591453355699369980787534333;
    uint256 constant IC143y = 5919746032135160555325853654782136113925901675993134583962320239749231542250;
    uint256 constant IC144x = 18573623501932762010779324318254840392402705527139310698201177282441327943233;
    uint256 constant IC144y = 12617605326036280202006625813761607737635406342230021643014018582018690777370;
    uint256 constant IC145x = 9294551096920217165790341262573027349075047275931203769835157745243974222862;
    uint256 constant IC145y = 12934556170067935009182297205393032459318848042704294148879947262739191524035;
    uint256 constant IC146x = 13565688383114442979367552295679414169545717406917126698303507701928730792066;
    uint256 constant IC146y = 12444755127955813913933484120677871192694241949437760346516715653459181029116;
    uint256 constant IC147x = 11359002572790670905639214672689117100583260830165437002628087302641825769996;
    uint256 constant IC147y = 7778701939039790673188663525133752508312707927984256746361530333742924990393;
    uint256 constant IC148x = 3496631543387367281491514572199368127193626733706765835174595394079730228509;
    uint256 constant IC148y = 2147622647323442821126744846402285706172640017210132535940752041596936277913;
    uint256 constant IC149x = 2378336946426776012163885465594482763424084173648940648262807271004526379326;
    uint256 constant IC149y = 15090742815900380531917877410748965514469791746481766225043662949786161966603;
    uint256 constant IC150x = 17909034716719314651430903386020877339481750198224402254023144778882509262434;
    uint256 constant IC150y = 16626964803224710863589259842831293447363984901565073097261119009414836301233;

    function _getICRange() internal pure returns (uint256 start, uint256 end) {
        return (1, 151);
    }

    function _getICCount() internal pure returns (uint256) {
        (uint256 start, uint256 end) = _getICRange();
        return end - start;
    }

    function getICCount() external pure returns (uint256) {
        return _getICCount();
    }

    function _getIC(uint256 index) internal pure returns (uint256 x, uint256 y) {
        (uint256 start, uint256 end) = _getICRange();
        if (index < start || index >= end) revert IndexOutOfRange(index);

        if (index == 1) return (IC1x, IC1y);
        if (index == 2) return (IC2x, IC2y);
        if (index == 3) return (IC3x, IC3y);
        if (index == 4) return (IC4x, IC4y);
        if (index == 5) return (IC5x, IC5y);
        if (index == 6) return (IC6x, IC6y);
        if (index == 7) return (IC7x, IC7y);
        if (index == 8) return (IC8x, IC8y);
        if (index == 9) return (IC9x, IC9y);
        if (index == 10) return (IC10x, IC10y);
        if (index == 11) return (IC11x, IC11y);
        if (index == 12) return (IC12x, IC12y);
        if (index == 13) return (IC13x, IC13y);
        if (index == 14) return (IC14x, IC14y);
        if (index == 15) return (IC15x, IC15y);
        if (index == 16) return (IC16x, IC16y);
        if (index == 17) return (IC17x, IC17y);
        if (index == 18) return (IC18x, IC18y);
        if (index == 19) return (IC19x, IC19y);
        if (index == 20) return (IC20x, IC20y);
        if (index == 21) return (IC21x, IC21y);
        if (index == 22) return (IC22x, IC22y);
        if (index == 23) return (IC23x, IC23y);
        if (index == 24) return (IC24x, IC24y);
        if (index == 25) return (IC25x, IC25y);
        if (index == 26) return (IC26x, IC26y);
        if (index == 27) return (IC27x, IC27y);
        if (index == 28) return (IC28x, IC28y);
        if (index == 29) return (IC29x, IC29y);
        if (index == 30) return (IC30x, IC30y);
        if (index == 31) return (IC31x, IC31y);
        if (index == 32) return (IC32x, IC32y);
        if (index == 33) return (IC33x, IC33y);
        if (index == 34) return (IC34x, IC34y);
        if (index == 35) return (IC35x, IC35y);
        if (index == 36) return (IC36x, IC36y);
        if (index == 37) return (IC37x, IC37y);
        if (index == 38) return (IC38x, IC38y);
        if (index == 39) return (IC39x, IC39y);
        if (index == 40) return (IC40x, IC40y);
        if (index == 41) return (IC41x, IC41y);
        if (index == 42) return (IC42x, IC42y);
        if (index == 43) return (IC43x, IC43y);
        if (index == 44) return (IC44x, IC44y);
        if (index == 45) return (IC45x, IC45y);
        if (index == 46) return (IC46x, IC46y);
        if (index == 47) return (IC47x, IC47y);
        if (index == 48) return (IC48x, IC48y);
        if (index == 49) return (IC49x, IC49y);
        if (index == 50) return (IC50x, IC50y);
        if (index == 51) return (IC51x, IC51y);
        if (index == 52) return (IC52x, IC52y);
        if (index == 53) return (IC53x, IC53y);
        if (index == 54) return (IC54x, IC54y);
        if (index == 55) return (IC55x, IC55y);
        if (index == 56) return (IC56x, IC56y);
        if (index == 57) return (IC57x, IC57y);
        if (index == 58) return (IC58x, IC58y);
        if (index == 59) return (IC59x, IC59y);
        if (index == 60) return (IC60x, IC60y);
        if (index == 61) return (IC61x, IC61y);
        if (index == 62) return (IC62x, IC62y);
        if (index == 63) return (IC63x, IC63y);
        if (index == 64) return (IC64x, IC64y);
        if (index == 65) return (IC65x, IC65y);
        if (index == 66) return (IC66x, IC66y);
        if (index == 67) return (IC67x, IC67y);
        if (index == 68) return (IC68x, IC68y);
        if (index == 69) return (IC69x, IC69y);
        if (index == 70) return (IC70x, IC70y);
        if (index == 71) return (IC71x, IC71y);
        if (index == 72) return (IC72x, IC72y);
        if (index == 73) return (IC73x, IC73y);
        if (index == 74) return (IC74x, IC74y);
        if (index == 75) return (IC75x, IC75y);
        if (index == 76) return (IC76x, IC76y);
        if (index == 77) return (IC77x, IC77y);
        if (index == 78) return (IC78x, IC78y);
        if (index == 79) return (IC79x, IC79y);
        if (index == 80) return (IC80x, IC80y);
        if (index == 81) return (IC81x, IC81y);
        if (index == 82) return (IC82x, IC82y);
        if (index == 83) return (IC83x, IC83y);
        if (index == 84) return (IC84x, IC84y);
        if (index == 85) return (IC85x, IC85y);
        if (index == 86) return (IC86x, IC86y);
        if (index == 87) return (IC87x, IC87y);
        if (index == 88) return (IC88x, IC88y);
        if (index == 89) return (IC89x, IC89y);
        if (index == 90) return (IC90x, IC90y);
        if (index == 91) return (IC91x, IC91y);
        if (index == 92) return (IC92x, IC92y);
        if (index == 93) return (IC93x, IC93y);
        if (index == 94) return (IC94x, IC94y);
        if (index == 95) return (IC95x, IC95y);
        if (index == 96) return (IC96x, IC96y);
        if (index == 97) return (IC97x, IC97y);
        if (index == 98) return (IC98x, IC98y);
        if (index == 99) return (IC99x, IC99y);
        if (index == 100) return (IC100x, IC100y);
        if (index == 101) return (IC101x, IC101y);
        if (index == 102) return (IC102x, IC102y);
        if (index == 103) return (IC103x, IC103y);
        if (index == 104) return (IC104x, IC104y);
        if (index == 105) return (IC105x, IC105y);
        if (index == 106) return (IC106x, IC106y);
        if (index == 107) return (IC107x, IC107y);
        if (index == 108) return (IC108x, IC108y);
        if (index == 109) return (IC109x, IC109y);
        if (index == 110) return (IC110x, IC110y);
        if (index == 111) return (IC111x, IC111y);
        if (index == 112) return (IC112x, IC112y);
        if (index == 113) return (IC113x, IC113y);
        if (index == 114) return (IC114x, IC114y);
        if (index == 115) return (IC115x, IC115y);
        if (index == 116) return (IC116x, IC116y);
        if (index == 117) return (IC117x, IC117y);
        if (index == 118) return (IC118x, IC118y);
        if (index == 119) return (IC119x, IC119y);
        if (index == 120) return (IC120x, IC120y);
        if (index == 121) return (IC121x, IC121y);
        if (index == 122) return (IC122x, IC122y);
        if (index == 123) return (IC123x, IC123y);
        if (index == 124) return (IC124x, IC124y);
        if (index == 125) return (IC125x, IC125y);
        if (index == 126) return (IC126x, IC126y);
        if (index == 127) return (IC127x, IC127y);
        if (index == 128) return (IC128x, IC128y);
        if (index == 129) return (IC129x, IC129y);
        if (index == 130) return (IC130x, IC130y);
        if (index == 131) return (IC131x, IC131y);
        if (index == 132) return (IC132x, IC132y);
        if (index == 133) return (IC133x, IC133y);
        if (index == 134) return (IC134x, IC134y);
        if (index == 135) return (IC135x, IC135y);
        if (index == 136) return (IC136x, IC136y);
        if (index == 137) return (IC137x, IC137y);
        if (index == 138) return (IC138x, IC138y);
        if (index == 139) return (IC139x, IC139y);
        if (index == 140) return (IC140x, IC140y);
        if (index == 141) return (IC141x, IC141y);
        if (index == 142) return (IC142x, IC142y);
        if (index == 143) return (IC143x, IC143y);
        if (index == 144) return (IC144x, IC144y);
        if (index == 145) return (IC145x, IC145y);
        if (index == 146) return (IC146x, IC146y);
        if (index == 147) return (IC147x, IC147y);
        if (index == 148) return (IC148x, IC148y);
        if (index == 149) return (IC149x, IC149y);
        if (index == 150) return (IC150x, IC150y);

        revert("Invalid index");
    }

    function getIC(uint256 index) external pure returns (uint256 x, uint256 y) {
        return _getIC(index);
    }

    function getBatchIC(uint256 startIdx, uint256 count)
        external
        pure
        returns (uint256[] memory xs, uint256[] memory ys)
    {
        (uint256 start, uint256 end) = _getICRange();
        if (startIdx < start || startIdx >= end) revert BatchStartOutOfRange(startIdx);
        if (startIdx + count > end) revert BatchEndOutOfRange(startIdx, count);

        xs = new uint256[](count);
        ys = new uint256[](count);

        for (uint256 i = 0; i < count; i++) {
            (xs[i], ys[i]) = _getIC(startIdx + i);
        }
    }
}

contract VerifierConstants2 is IVerifierConstants {
    uint256 constant IC151x = 21236238664939680337102396199537546950813551426684279275634754192474085251657;
    uint256 constant IC151y = 6317882093933501108932261204909526621780401914266355414027612638063207796955;
    uint256 constant IC152x = 2276273305139744879923078765872532269884113480891952310295449311620816059865;
    uint256 constant IC152y = 17549164663360089031130928479433743606480511804191828356653959420967345313346;
    uint256 constant IC153x = 108971005828289915000774644637303705558089710597958227417681440405804161354;
    uint256 constant IC153y = 18544712224224385192187185560796612009150535517758260535700739832197238713426;
    uint256 constant IC154x = 766653021001548038750991940015146967636809792271764272480583642243474078782;
    uint256 constant IC154y = 1096158443213038416496364005334282906691412870567716223022110086638636602212;
    uint256 constant IC155x = 15638099828882318139621097212659478323288953544055427783249504964592141237180;
    uint256 constant IC155y = 15034820015260646447208528932248097888168191936871365247671451481599067103829;
    uint256 constant IC156x = 7601933753286697451407530601625612175897982499009805915567631741970589586607;
    uint256 constant IC156y = 16846250012177097229200751825698777724992895034572329220219304615498725634329;
    uint256 constant IC157x = 19753161060315047750499605335320882439874001938338123724673022589127441140143;
    uint256 constant IC157y = 19907185957764340888932597562530831962421447304222334527649144430334050833060;
    uint256 constant IC158x = 20828510476213713975079627038124740262694583948508543350111079491545368215570;
    uint256 constant IC158y = 5113535361106949911375745158824304377293667020704286403176301997088765633147;
    uint256 constant IC159x = 19976222398415715618974868247884998623696068277830269174998454833247484928571;
    uint256 constant IC159y = 13057134008248577100162988664898010793932861225534406559306900606349682638909;
    uint256 constant IC160x = 16144581030426069450409618304221030368245065323099328058401994340038474907962;
    uint256 constant IC160y = 19078426868470296933316283746766496863296521108656490885435071015117424924465;
    uint256 constant IC161x = 21233875903304201369218396702205879328880779720373577816833351674653581546256;
    uint256 constant IC161y = 16726622523217693804870899433762695132918610242369961487573365840879272056879;
    uint256 constant IC162x = 4375483448721258724845741417012196457965526067344116506412523509557048304042;
    uint256 constant IC162y = 8601801817639979140150665747969182057846520956166979223603532287226962835710;
    uint256 constant IC163x = 12706583153387749846427002517927610729718737369808284677826098648177598960993;
    uint256 constant IC163y = 18056437415393557497297980520124692666715765818700444311340037806987326997576;
    uint256 constant IC164x = 20980393482180750844603026899558244995302283725747674253376493327240028095878;
    uint256 constant IC164y = 17903603905091189435822605897756078880225640106011387650438281415349699314157;
    uint256 constant IC165x = 14369210544831288485043208832422585736292386263913975305965195651205269766845;
    uint256 constant IC165y = 10993554054184639849740240990486020851382571984936672895506428076504907337247;
    uint256 constant IC166x = 17935821087745759307733850020605644701445513231809556146828137067260126371663;
    uint256 constant IC166y = 2978252656320636775190158953737163477152740588915598822856210187395717676704;
    uint256 constant IC167x = 13654908129264306852410201569163145943166820526568742830729608565904619564844;
    uint256 constant IC167y = 12967665164969802111230152362435551196118354634243890797515397965199031220754;
    uint256 constant IC168x = 15434222912018462286171077211625622751962729665047984463412523554329571508295;
    uint256 constant IC168y = 8432598932412236012899705376019955791798666307573629552342005236153555476519;
    uint256 constant IC169x = 1783366624449902075813276311996626104363576506521743033118941978256231392061;
    uint256 constant IC169y = 17043588306157092357466820309464842086863858838239089395513900319163462805408;
    uint256 constant IC170x = 13263328612604359979387382772328805389456755946443601041599590978180210436347;
    uint256 constant IC170y = 14723282024167651116528864982734076288572620383556842353369876105014465552852;
    uint256 constant IC171x = 15374084286791587076141232468542807246804288194974031347154932001995816596555;
    uint256 constant IC171y = 13710261476394078632223835436868924859754904863324412117892703286753659159548;
    uint256 constant IC172x = 12344003140645804483627112652672835738486037556828020979319299721410746818594;
    uint256 constant IC172y = 9941779064845763928114109838728387827810757286610568581153606914444087445771;
    uint256 constant IC173x = 17407800881121553150658813266378199076547648822527018626544615283273277806912;
    uint256 constant IC173y = 12990984818911194039941863439667455710041672402507717681430415382862889414585;
    uint256 constant IC174x = 19101432610098887041483406418409351499672751249106775132364780939663344638581;
    uint256 constant IC174y = 7169020232300218044300308209698585174875574620700580288463023326827146798892;
    uint256 constant IC175x = 19589883410123357049301953744668333849539367584557360654140144369294208200872;
    uint256 constant IC175y = 9261015182208995820503521927337751531262209959453978512645435222519587266634;
    uint256 constant IC176x = 6253520475978625938295949302136186049637346572594061975264832790750396960893;
    uint256 constant IC176y = 7655187795581200011167849145982621793274488156700188948648238725900245074519;
    uint256 constant IC177x = 4699745724067173936241911260234523734293127827269379769189503011900447525694;
    uint256 constant IC177y = 20076406977101841831163504105756067438465407911932287557972419283613157575668;
    uint256 constant IC178x = 9096881306384473675723660680183509155592355045185438799885801778941570439806;
    uint256 constant IC178y = 7327488793296313912025947111687277978107289928025868094240357492553943605924;
    uint256 constant IC179x = 18019421711364753626914585966491508751714921738298910555964019519025548683719;
    uint256 constant IC179y = 13974872525978491173046725960495623395791952625548366711994732153999979273655;
    uint256 constant IC180x = 8054439479385407539115274619608265346959972443073235618167664199225207350610;
    uint256 constant IC180y = 2198434046512075155748909097357411047301137965203508496287942380299561417509;
    uint256 constant IC181x = 15578303660389883736702137609865567314589611625106749533655418579889063392252;
    uint256 constant IC181y = 15171789722247525037783682665641843662197772569930839787556746651083576529047;
    uint256 constant IC182x = 2962376627679030327918173852395016798979064194622058086434816833585829607061;
    uint256 constant IC182y = 9725562356375263895135879693505186314982599638082582770248358015028503382420;
    uint256 constant IC183x = 20574458965800836650851469016216492344998057588402575711201440416642002851361;
    uint256 constant IC183y = 10876410177960695292103816603453061253523083857185283427508150310964989997517;
    uint256 constant IC184x = 2446754260374922439488371004804405671277903154404707510303626998626019453776;
    uint256 constant IC184y = 12013439811440846449554434416491793407170741510547650440229220533439095360175;
    uint256 constant IC185x = 20246452418537521372530869100526640068840591125085571231573889293158647359227;
    uint256 constant IC185y = 10329452284857938909694810520746961789589455583404668136715100478785574799863;
    uint256 constant IC186x = 6184518961097869714748485858229838254648732176632748898208976810346861581305;
    uint256 constant IC186y = 17034201699092126907491485177629359015348263337879363867177875039853384770299;
    uint256 constant IC187x = 15879410996823954799030148036467596135557777131439562290954032932350079772035;
    uint256 constant IC187y = 17655554632270478107844038935363104700622013796807013293184081976033287615346;
    uint256 constant IC188x = 18433232566433155557437693718234620912169413128690980463917271535681517705496;
    uint256 constant IC188y = 4514698158571901493243236898340107709683429379103832459734304169907694609651;
    uint256 constant IC189x = 5440777789720572874908501227168628422991453895393190394676975893175782196998;
    uint256 constant IC189y = 2773546216717455569550820221302242156400568325193344738491523607923877048396;
    uint256 constant IC190x = 13755901176040322372153900976894003174488575116551367709756257948406956418680;
    uint256 constant IC190y = 12334230105908381352615446295423067875000506265190493718876862312372509969687;
    uint256 constant IC191x = 12899077467208189999508542495880710319543349506941605270645214378105867689891;
    uint256 constant IC191y = 5795826342581681745095477447706828518509115065939531243979958090091935682936;
    uint256 constant IC192x = 21695673496531260039147687479422379049646218823025916650414083150001662988949;
    uint256 constant IC192y = 6251861438729935286520720275461325460065734900189908176062292144286407620460;
    uint256 constant IC193x = 6507341072498609909144801049050971334802722709172558773298640696638672602524;
    uint256 constant IC193y = 9492803423101210520037588189148020525944801395446821817622548892556072065066;
    uint256 constant IC194x = 16162985660378722247460896843822047929421829511015581437915626738982793770544;
    uint256 constant IC194y = 743034336661232488521327166991069220636927553168089576867410026602795959809;
    uint256 constant IC195x = 8045199210216613463139977774974481219499664060147167049534558885440905823495;
    uint256 constant IC195y = 18723510529923669531113621395942168000532010031488378002347139643712161155458;
    uint256 constant IC196x = 7207487091651638233336767306343297681803055545854318874325483106171901788443;
    uint256 constant IC196y = 7208585923918330721793061308019024243775960771212363585447645753832643554372;
    uint256 constant IC197x = 11005891379505047780217121068846576174981168635114443423598739700818026049739;
    uint256 constant IC197y = 13930131983417820106783703759442664199329076893074532194564847427283917449265;
    uint256 constant IC198x = 20393504332745664886313062694430929834597175020242761926870603001742083902721;
    uint256 constant IC198y = 11038152349734229854227173926045412783176820734965986232966551996566134309890;
    uint256 constant IC199x = 12625603211759707480291075587112737687264668438791166726355298345742383014375;
    uint256 constant IC199y = 2401889166301501779427175660352444607821717133054588162704671329194440400032;
    uint256 constant IC200x = 21364703547781613018155063828718684116598395194401609592461929515284176314259;
    uint256 constant IC200y = 2129209184292997241888683952024538260181886018610857114281777180488009885768;
    uint256 constant IC201x = 7387423732409190249508793560633484948425380704052754463589192356807646854636;
    uint256 constant IC201y = 11926733467618434353860629887367009646875944093264928589998926796866676711414;
    uint256 constant IC202x = 62230581343814130685694720057788160014384911076488464148265491930292394607;
    uint256 constant IC202y = 3566541958647617867789632725187606884828027271531605318223165692886893233192;
    uint256 constant IC203x = 9218300289330866311037907566609124705557935202075003323085738965937256435292;
    uint256 constant IC203y = 157804173550159729673033595343154624292930385714001716914492023495366043164;
    uint256 constant IC204x = 19473394742545229767856479822419911891862961133768996964785582417133520046298;
    uint256 constant IC204y = 7066025686463877276572263219458403722887229881274489808794510439210164968277;
    uint256 constant IC205x = 10356255159704789147046613364637590361427885682695487034690514617287909443791;
    uint256 constant IC205y = 20021893702952491649542017265597358287613965430329460258456418615602988481712;
    uint256 constant IC206x = 21863732812727223943983669479359908679154272985500207367718771894610464265652;
    uint256 constant IC206y = 8320028150343803461548971651691789567983932747680495028024261715622396749915;
    uint256 constant IC207x = 1540358610481474019779822292769058051349641281103976385123817050828370925234;
    uint256 constant IC207y = 4207504608522205919137504107186107704476232786323460992318306896033149416436;
    uint256 constant IC208x = 14336821341727600291815284730386336596411461896941493936558344971815319867113;
    uint256 constant IC208y = 20936835819581175428770031107263047520463345914274932801845037405570628051549;
    uint256 constant IC209x = 16015356774019624934006777751727095029485973071779616286438141396533087112497;
    uint256 constant IC209y = 3826696419146631711210591234039170418606508361862259215430017671313059662710;
    uint256 constant IC210x = 13749292663329711725923183271177871931172230781368779873291822179203221367622;
    uint256 constant IC210y = 16852492612701191793756740942734713578237330153656914404743418249236730359048;
    uint256 constant IC211x = 19157660738614849614325835434292281241306943846460380859638590228486397604337;
    uint256 constant IC211y = 11049661964747503743607731498341133022482015425599366014250487539065176889326;
    uint256 constant IC212x = 17626743690265003404826719052058980543188974737731407528053705058303896409826;
    uint256 constant IC212y = 13328556628928759501342159780114721978633137470795676411631757328081721432130;
    uint256 constant IC213x = 3234752887774318158562447466681795172344295021551645495320009135221887148125;
    uint256 constant IC213y = 13715650614550630805484839269733660670872177141586430890943827533734471076073;
    uint256 constant IC214x = 10090074568111217274380588444232767958964952267955081226882218595092021770057;
    uint256 constant IC214y = 12537335940058066363462432184111181725790174209212336641838637038607032992630;
    uint256 constant IC215x = 8780868666949231309481699623464112603047799705758541937258416571662178433589;
    uint256 constant IC215y = 14102482927008366990960816294456904477662586200361278508550301720423567481798;
    uint256 constant IC216x = 1466322599999398413438606789685483558405240780451679385297392339741415463776;
    uint256 constant IC216y = 4240421657320243815792472424536857252710942728098069960170517493493436158080;
    uint256 constant IC217x = 21321434500043265572046785020931599226303890232605298885150897571357735590330;
    uint256 constant IC217y = 7850314283167733203244503521165888070201308985282983851367816876473537984376;
    uint256 constant IC218x = 3896397738179463754755804055732395004139820134377710845860342333376639338068;
    uint256 constant IC218y = 17638385936906588907035840993657576553652255775529891487709428340980509961188;
    uint256 constant IC219x = 12852540770730549486751426242987157514386360906148273301367149404944552301429;
    uint256 constant IC219y = 4765675069255070998841236026230126969158509848157034327374010036353173229306;
    uint256 constant IC220x = 20876236979863143566124737980961459896171968299863217726070588128341920786978;
    uint256 constant IC220y = 20659415425819241443274358039094046430944178918936017585257042077346096674263;
    uint256 constant IC221x = 4864496104510214005091617206473805385834823297163738103291059577223471973875;
    uint256 constant IC221y = 21412654444776045163811130917010534942393202704037855266255343878456884680651;
    uint256 constant IC222x = 6567182853892183335698538786718432250117439123404367673302009940002637204661;
    uint256 constant IC222y = 4906390038927036339929280505298329077233673246372813959746973787944417298254;
    uint256 constant IC223x = 12847369315560672227527888517125618193884520216158660087430943747271216717379;
    uint256 constant IC223y = 313014237529523386638180223314464020933397090620665075706414787922529351218;
    uint256 constant IC224x = 6585875562171250081068745714094331368750862050066524469320980407116743353201;
    uint256 constant IC224y = 18901932166380066380506207068310061008491598726047542146709083641942461613803;
    uint256 constant IC225x = 13315209159611088604844869475451789587867929398218211281814435843119404777409;
    uint256 constant IC225y = 16041979002517078023460002379955035898943376196963179635097769838761862040859;
    uint256 constant IC226x = 12474195104693164839207220174608373701575586075223536402151789189952282866118;
    uint256 constant IC226y = 1590743424956213144247043351202667647034873982402904869228446537666253266014;
    uint256 constant IC227x = 3486765590992149915853174233304446976410606700309917747449380199602845177327;
    uint256 constant IC227y = 15429481413012301463152154523184143687126202960072199527565693539440972346790;
    uint256 constant IC228x = 6810964317186231835836641277146377311781758158650886307028616010277702373701;
    uint256 constant IC228y = 3797095662857585873062238532988160608028028521228837827748330621808821602619;
    uint256 constant IC229x = 18919926798893042388410908194829460517896970393947730765819866135578668529389;
    uint256 constant IC229y = 2231323626714235158310501361275743501780723226805071217137547039567068474514;
    uint256 constant IC230x = 21126562396698095234121306217300742339321319868253656663825226569886124882686;
    uint256 constant IC230y = 3135753779944278082329324465545412251472292459204157090215771030293278479401;
    uint256 constant IC231x = 19605371653082859915695225098860915795376697518343482526125229001926866303663;
    uint256 constant IC231y = 18530420624268095801942196351895887895296907685213825124267039302870208176517;
    uint256 constant IC232x = 8305234874883625209032419216656393634683396844245897759252845833586756810527;
    uint256 constant IC232y = 13987781040486603903973073577050186213105300346295523104292870078917108217689;
    uint256 constant IC233x = 6312640708895668295766767792238330203894690698235288611402732901323720319300;
    uint256 constant IC233y = 12959569293007759655960052334968506318723218521664082179912650722269458558491;
    uint256 constant IC234x = 18759227182002132452584084832386124768940918660905657976271273412509720024308;
    uint256 constant IC234y = 1787162629009157107799924135888502387452344272189198656456562826860412866680;
    uint256 constant IC235x = 6787353816936348402667518178528514284635520994523210114631939093593776381568;
    uint256 constant IC235y = 14011697339764209736322571578648683721531707732069512561320590263868151092610;
    uint256 constant IC236x = 19124830526861332553297765166732611963448749657735199723427930467289810486324;
    uint256 constant IC236y = 12683614133975142386889135511203269390006487894989569995348091735430167205943;
    uint256 constant IC237x = 136542650958285785040136906502907049134811102907619296501624793288885091878;
    uint256 constant IC237y = 20022109336859657578110416115489561070878991317455023134524139190288672726598;
    uint256 constant IC238x = 11171026911024712270850633927875799445952233438690829502761738607288432542550;
    uint256 constant IC238y = 5194361821261073724130982742997740802955126602359929484998757745520093538699;
    uint256 constant IC239x = 20141312206651801951328834969346090433923403620141452796064271351183399981581;
    uint256 constant IC239y = 18858267877056743906655543595393930231491819057541251876427528086941048896984;
    uint256 constant IC240x = 778260218855496958689799695256474071620864498885523721561845197777406242455;
    uint256 constant IC240y = 2703991966316758214852103041860989028301899556590752991748491865924236919906;
    uint256 constant IC241x = 10491192812874663676781376379253669668000808863171809876485462673662177142775;
    uint256 constant IC241y = 5341944080359051680719950909415233589094184197317956576522994991396003979327;
    uint256 constant IC242x = 15487793396761751693356292453764422056388943979967406845877456316589661283016;
    uint256 constant IC242y = 12084683123148281251038349024356993778197257470800118945322383395844647765676;
    uint256 constant IC243x = 6698106773020048896902045261642183683433241851933520793319569067154597674732;
    uint256 constant IC243y = 20036278616613113439079243780080954507039876142102321257774930492273485570527;
    uint256 constant IC244x = 9881004940088946974921386341807724055407981510767586772510419082094466887703;
    uint256 constant IC244y = 13806360810084024964969371633086131730758956869300743598066494973746791571410;
    uint256 constant IC245x = 16680215831686882048146541327269616728400046738054285474465387910618960261065;
    uint256 constant IC245y = 20948251107686778977204423274872530919166950565696829488933368234465440041608;
    uint256 constant IC246x = 7278122555689544056363544375097944567383366983852929252832964533730186544955;
    uint256 constant IC246y = 4333778707526674064508203319672527785739380469045260131303092370810641731094;
    uint256 constant IC247x = 4621220957828592195775667858126267125042622662963036765039727207633202647516;
    uint256 constant IC247y = 20986075076519339741535578756496314372645619831822075593552983097321560252563;
    uint256 constant IC248x = 21195132008663451004773583206182545210689083276319719627398621555505204810725;
    uint256 constant IC248y = 4345143357797021553178851409722895268981521723689617621538546754777661744921;
    uint256 constant IC249x = 20522313936272353932190570048618702890309616965191685422644479631041286716152;
    uint256 constant IC249y = 13313958946953157130995833729978602474495451429980836724739779428910915648489;
    uint256 constant IC250x = 5980547113424612503033362195339836802760498697737005765082603991527117583383;
    uint256 constant IC250y = 10912996524842833256324678033890348765625421080097366645618607325183033583308;
    uint256 constant IC251x = 2751264124046331656814915479604474578288021215218717532108781475778193771023;
    uint256 constant IC251y = 10950283892355083968927537400510910872333401675732828938247312351884972081548;
    uint256 constant IC252x = 10934191005168673294272109069666770937657672234089043838525099381999301229186;
    uint256 constant IC252y = 9434444359239381271344587915264294242580113656906632961718990066472112702640;
    uint256 constant IC253x = 11960738868887879005635711074906835606654841228049427597701770686436924680756;
    uint256 constant IC253y = 4810420220306029190210910849855578441707173002154270178667360984263907607393;
    uint256 constant IC254x = 6457891134173670677355390718349224414356910807366823128788838371760599495725;
    uint256 constant IC254y = 18453483499087114191857103000432645954450373967549616018259941351540411705096;
    uint256 constant IC255x = 6410602813604229816527094097377024709877559375793719871033644142559325874572;
    uint256 constant IC255y = 2133906723453499933847018560840240536209062780851022280794592006710643264056;
    uint256 constant IC256x = 14920618393896470547621112416674524053423916382929327989130726159321630793201;
    uint256 constant IC256y = 15815417053469144753591268473325423916420832077918804496640049006270836383756;
    uint256 constant IC257x = 5134303258478968955076923733859269804589489498680389402873104134342594650466;
    uint256 constant IC257y = 11685059915960411893390893873048173790712065552833703734984377861355272790649;
    uint256 constant IC258x = 15843087425078416895041191739007486829585003366189344956685424119045233443496;
    uint256 constant IC258y = 687019716276671346867225040582439879945477061606360132029611721192738323126;
    uint256 constant IC259x = 18559795566441292143911266099180597102621051171627448250752892888984786815706;
    uint256 constant IC259y = 21797016554997429131784618938630828962984844033364329855741935650565635809190;
    uint256 constant IC260x = 8638230635924091188994912322347007714544018537121052356818284384983461586195;
    uint256 constant IC260y = 11104409622298036138814564944222389358436939203758833147533534958095827405536;
    uint256 constant IC261x = 10243804594510219465491036145606709427885959536254424884135858568467934584639;
    uint256 constant IC261y = 2731622913921004958217328451867813538269421704923679054645018807855955734745;
    uint256 constant IC262x = 13407183257913363785302898484728957525947166005063721279700293156182809225796;
    uint256 constant IC262y = 19587161773561289053967340889767660090427934109782292923237291037863267970124;
    uint256 constant IC263x = 12855161700089302235248434228367168088838877607999076822074483476325110460731;
    uint256 constant IC263y = 21578275965217898455080310760866015787135385438565071816979588419076913982840;
    uint256 constant IC264x = 3867234793622107714063995773035276310583692964098732924806899815121053864052;
    uint256 constant IC264y = 17155756885600765417823815773364233822965586541081225374774465702298645207978;
    uint256 constant IC265x = 15442995734588959597615283791417294372612240574442188942503200061446835220775;
    uint256 constant IC265y = 3053322809267621076299142854745180891667355749265634795426341261705231296279;
    uint256 constant IC266x = 14182030570883414082609493048686682942048008119368687852482218516656069485974;
    uint256 constant IC266y = 2548326821755320283136099015617413265781125982469233745688531333029624397978;
    uint256 constant IC267x = 4789998572379498615371435027919049187558935206148519144950040425179311345384;
    uint256 constant IC267y = 19350198259966855562310320321176772587464668635513964719540442914425591999366;
    uint256 constant IC268x = 12177825720651976979775283425970287970155079624101602063447902608142665075449;
    uint256 constant IC268y = 1193660491206343877516317617513724818571150103489464870043574951940237495055;
    uint256 constant IC269x = 2487668960095787908831000124849405327207606441472811379781662756922475773416;
    uint256 constant IC269y = 8647316862846028205402510697905314487730250344531342113930193557682270456382;
    uint256 constant IC270x = 10713364615411322587602847682927157587107346062618148363192188123329767720869;
    uint256 constant IC270y = 2626405388791490881746928220262916634932327378543979065598807269676917087581;
    uint256 constant IC271x = 20638560578257925857262471991060107734716607942838675145215473358746071684791;
    uint256 constant IC271y = 5256122756782344337131430631699656256677182762300688743050876732983884102297;
    uint256 constant IC272x = 6404754848806778697154708832921588336549437217589291721950516056522676404225;
    uint256 constant IC272y = 17569502866333403779515032844889393099738716096594679784785605621125451240229;
    uint256 constant IC273x = 1281463839996986066409244906966448926227248091818859912005759360646961993305;
    uint256 constant IC273y = 12542227917681001120114619429960779630447172514943906246414707020058055424134;
    uint256 constant IC274x = 11517094767179309043783027305128200440254072041311269408408314314024110204672;
    uint256 constant IC274y = 10224080282442466344387435220005837375095119777845394357575991026401850651698;
    uint256 constant IC275x = 16568910051367665276808634946886287358036936260162430687517288969535857634949;
    uint256 constant IC275y = 12196613675200186149823916582696078343757812837451141253610827463114429481144;
    uint256 constant IC276x = 507693538787618454601418720340345631684589923889788782117002055743707727175;
    uint256 constant IC276y = 11274113250111655449554607055346777128354634158685839352971211317157259847199;
    uint256 constant IC277x = 6209166829971298202505942205889083917262827296453230892683916890197094613264;
    uint256 constant IC277y = 9562915165552209162852278530549592957851481250687402553906413910279608764924;
    uint256 constant IC278x = 12865982560864885171483320822425663100239269028040342019927657293901982199001;
    uint256 constant IC278y = 10956568927324492417186107926990346736761930431142701213591654938578206585578;
    uint256 constant IC279x = 18087114183168486850239399721350285599689762370666256708482913535904538214733;
    uint256 constant IC279y = 18985148034450183584931411753696148069231847857621918188531513128433449287647;
    uint256 constant IC280x = 13465491020539076190264237587955165851125494430882646049003912866291843230467;
    uint256 constant IC280y = 19078626708292172947852150846620601739015926798431024420214342839776724493360;
    uint256 constant IC281x = 1128372503957766330314516749691346302429346806694918184136884956461948198104;
    uint256 constant IC281y = 21721977399153627121859353715874449865693526103478283684866556103192802721766;
    uint256 constant IC282x = 19105848113309627759623279092799620712211414950607288404215962563533928053785;
    uint256 constant IC282y = 6803968602143943350640612137467639247864425704565577018538727706799353410724;
    uint256 constant IC283x = 18311263051905325913043474727884941006073623619462848869342844977233536174637;
    uint256 constant IC283y = 4537309725344593605924997795030495170361888890397774613580600477674030678850;
    uint256 constant IC284x = 544021923254252350081256512404122943001184350148923391993604852540121076411;
    uint256 constant IC284y = 18520563795161695400223030831501379921202101728658088895177495729152108997221;
    uint256 constant IC285x = 7755028765657389795444447312225071994304916851398742023392013222516225362271;
    uint256 constant IC285y = 10713902559518464343362838310311976340545947247540380988341104558823939933387;

    function _getICRange() internal pure returns (uint256 start, uint256 end) {
        return (151, 286);
    }

    function _getICCount() internal pure returns (uint256) {
        (uint256 start, uint256 end) = _getICRange();
        return end - start;
    }

    function getICCount() external pure returns (uint256) {
        return _getICCount();
    }

    function _getIC(uint256 index) internal pure returns (uint256 x, uint256 y) {
        (uint256 start, uint256 end) = _getICRange();
        if (index < start || index >= end) revert IndexOutOfRange(index);

        if (index == 151) return (IC151x, IC151y);
        if (index == 152) return (IC152x, IC152y);
        if (index == 153) return (IC153x, IC153y);
        if (index == 154) return (IC154x, IC154y);
        if (index == 155) return (IC155x, IC155y);
        if (index == 156) return (IC156x, IC156y);
        if (index == 157) return (IC157x, IC157y);
        if (index == 158) return (IC158x, IC158y);
        if (index == 159) return (IC159x, IC159y);
        if (index == 160) return (IC160x, IC160y);
        if (index == 161) return (IC161x, IC161y);
        if (index == 162) return (IC162x, IC162y);
        if (index == 163) return (IC163x, IC163y);
        if (index == 164) return (IC164x, IC164y);
        if (index == 165) return (IC165x, IC165y);
        if (index == 166) return (IC166x, IC166y);
        if (index == 167) return (IC167x, IC167y);
        if (index == 168) return (IC168x, IC168y);
        if (index == 169) return (IC169x, IC169y);
        if (index == 170) return (IC170x, IC170y);
        if (index == 171) return (IC171x, IC171y);
        if (index == 172) return (IC172x, IC172y);
        if (index == 173) return (IC173x, IC173y);
        if (index == 174) return (IC174x, IC174y);
        if (index == 175) return (IC175x, IC175y);
        if (index == 176) return (IC176x, IC176y);
        if (index == 177) return (IC177x, IC177y);
        if (index == 178) return (IC178x, IC178y);
        if (index == 179) return (IC179x, IC179y);
        if (index == 180) return (IC180x, IC180y);
        if (index == 181) return (IC181x, IC181y);
        if (index == 182) return (IC182x, IC182y);
        if (index == 183) return (IC183x, IC183y);
        if (index == 184) return (IC184x, IC184y);
        if (index == 185) return (IC185x, IC185y);
        if (index == 186) return (IC186x, IC186y);
        if (index == 187) return (IC187x, IC187y);
        if (index == 188) return (IC188x, IC188y);
        if (index == 189) return (IC189x, IC189y);
        if (index == 190) return (IC190x, IC190y);
        if (index == 191) return (IC191x, IC191y);
        if (index == 192) return (IC192x, IC192y);
        if (index == 193) return (IC193x, IC193y);
        if (index == 194) return (IC194x, IC194y);
        if (index == 195) return (IC195x, IC195y);
        if (index == 196) return (IC196x, IC196y);
        if (index == 197) return (IC197x, IC197y);
        if (index == 198) return (IC198x, IC198y);
        if (index == 199) return (IC199x, IC199y);
        if (index == 200) return (IC200x, IC200y);
        if (index == 201) return (IC201x, IC201y);
        if (index == 202) return (IC202x, IC202y);
        if (index == 203) return (IC203x, IC203y);
        if (index == 204) return (IC204x, IC204y);
        if (index == 205) return (IC205x, IC205y);
        if (index == 206) return (IC206x, IC206y);
        if (index == 207) return (IC207x, IC207y);
        if (index == 208) return (IC208x, IC208y);
        if (index == 209) return (IC209x, IC209y);
        if (index == 210) return (IC210x, IC210y);
        if (index == 211) return (IC211x, IC211y);
        if (index == 212) return (IC212x, IC212y);
        if (index == 213) return (IC213x, IC213y);
        if (index == 214) return (IC214x, IC214y);
        if (index == 215) return (IC215x, IC215y);
        if (index == 216) return (IC216x, IC216y);
        if (index == 217) return (IC217x, IC217y);
        if (index == 218) return (IC218x, IC218y);
        if (index == 219) return (IC219x, IC219y);
        if (index == 220) return (IC220x, IC220y);
        if (index == 221) return (IC221x, IC221y);
        if (index == 222) return (IC222x, IC222y);
        if (index == 223) return (IC223x, IC223y);
        if (index == 224) return (IC224x, IC224y);
        if (index == 225) return (IC225x, IC225y);
        if (index == 226) return (IC226x, IC226y);
        if (index == 227) return (IC227x, IC227y);
        if (index == 228) return (IC228x, IC228y);
        if (index == 229) return (IC229x, IC229y);
        if (index == 230) return (IC230x, IC230y);
        if (index == 231) return (IC231x, IC231y);
        if (index == 232) return (IC232x, IC232y);
        if (index == 233) return (IC233x, IC233y);
        if (index == 234) return (IC234x, IC234y);
        if (index == 235) return (IC235x, IC235y);
        if (index == 236) return (IC236x, IC236y);
        if (index == 237) return (IC237x, IC237y);
        if (index == 238) return (IC238x, IC238y);
        if (index == 239) return (IC239x, IC239y);
        if (index == 240) return (IC240x, IC240y);
        if (index == 241) return (IC241x, IC241y);
        if (index == 242) return (IC242x, IC242y);
        if (index == 243) return (IC243x, IC243y);
        if (index == 244) return (IC244x, IC244y);
        if (index == 245) return (IC245x, IC245y);
        if (index == 246) return (IC246x, IC246y);
        if (index == 247) return (IC247x, IC247y);
        if (index == 248) return (IC248x, IC248y);
        if (index == 249) return (IC249x, IC249y);
        if (index == 250) return (IC250x, IC250y);
        if (index == 251) return (IC251x, IC251y);
        if (index == 252) return (IC252x, IC252y);
        if (index == 253) return (IC253x, IC253y);
        if (index == 254) return (IC254x, IC254y);
        if (index == 255) return (IC255x, IC255y);
        if (index == 256) return (IC256x, IC256y);
        if (index == 257) return (IC257x, IC257y);
        if (index == 258) return (IC258x, IC258y);
        if (index == 259) return (IC259x, IC259y);
        if (index == 260) return (IC260x, IC260y);
        if (index == 261) return (IC261x, IC261y);
        if (index == 262) return (IC262x, IC262y);
        if (index == 263) return (IC263x, IC263y);
        if (index == 264) return (IC264x, IC264y);
        if (index == 265) return (IC265x, IC265y);
        if (index == 266) return (IC266x, IC266y);
        if (index == 267) return (IC267x, IC267y);
        if (index == 268) return (IC268x, IC268y);
        if (index == 269) return (IC269x, IC269y);
        if (index == 270) return (IC270x, IC270y);
        if (index == 271) return (IC271x, IC271y);
        if (index == 272) return (IC272x, IC272y);
        if (index == 273) return (IC273x, IC273y);
        if (index == 274) return (IC274x, IC274y);
        if (index == 275) return (IC275x, IC275y);
        if (index == 276) return (IC276x, IC276y);
        if (index == 277) return (IC277x, IC277y);
        if (index == 278) return (IC278x, IC278y);
        if (index == 279) return (IC279x, IC279y);
        if (index == 280) return (IC280x, IC280y);
        if (index == 281) return (IC281x, IC281y);
        if (index == 282) return (IC282x, IC282y);
        if (index == 283) return (IC283x, IC283y);
        if (index == 284) return (IC284x, IC284y);
        if (index == 285) return (IC285x, IC285y);

        revert("Invalid index");
    }

    function getIC(uint256 index) external pure returns (uint256 x, uint256 y) {
        return _getIC(index);
    }

    function getBatchIC(uint256 startIdx, uint256 count)
        external
        pure
        returns (uint256[] memory xs, uint256[] memory ys)
    {
        (uint256 start, uint256 end) = _getICRange();
        if (startIdx < start || startIdx >= end) revert BatchStartOutOfRange(startIdx);
        if (startIdx + count > end) revert BatchEndOutOfRange(startIdx, count);

        xs = new uint256[](count);
        ys = new uint256[](count);

        for (uint256 i = 0; i < count; i++) {
            (xs[i], ys[i]) = _getIC(startIdx + i);
        }
    }
}
